Usage
=====

SNAPPY was recently moved to a package installation rather than a standalone script. Some details recorded below may not be applicable to the package installation.

Quick Start:
------------

Download or clone `SNAPPY <https://www.github.com/chrisgene/snappy/>`_, then navigate in the terminal to the folder where SNAPPY is saved. The folder should also contain the files parse_ref_files.py, parse_plink_files.py, and a directory called ‘ref_files’ that contains four additional files. Run SNAPPY with the following command:
::

   snappy --infile plink_library

where ``plink_library`` is the prefix name of the genotypes to be analyzed. Note that SNAPPY uses plink (v1.9) in a preprocessing step so a plink (v1.9) executable must be listed in the user’s path as `plink` for preprocessing steps. If plink (v1.9) is not available in the path, the input can be created manually using plink (v1.9) with the `--recodeAD` option. plink is available for all major operating systems and can be downloaded `here <https://www.cog-genomics.org/plink/1.9/>`_. 

.. _installation:

Installation:
-------------

Download or clone `SNAPPY <https://www.github.com/chrisgene/snappy/>`_, then navigate in the roo of the the local SNAPPY repository in terminal. Run the following commands:
::

   python setup.py sdist
   pip install dist/snappy-X.X.tar.gz
   
SNAPPY is now installed as a command-line tool and can be accessed from any directory. To test the installation, navigate to the root of the local SNAPPY repository, then run:
::

   snappy --infile test_data/TGP_chrY --out test_SNAPPY

Test SNAPPY's output against the output distributed with the software:
::

   diff test_SNAPPY.all test_data/TGP_SNAPPY_results.all > test_SNAPPY_diffs.txt

A working installation of SNAPPY should yield an empty file ``test_SNAPPY_diffs.txt``. 

Advanced Usage:
===============

Parameters:
-----------

The following table outlines user-controllable parameters that can be adjusted at run time:

==================  ====================  ===========================================
Parameter Name      Default Value         Description
==================  ====================  ===========================================
infile              N/A, required         Prefix to plink library or .raw file to be used as input
out                 'chrY_hgs'            Prefix to .out and .all files generated by SNAPPY
min_hap_score       0.6                   Minimum match score for a haplogroup to be considered for assignment
min_deep_score      0.8                   Minimum score to switch from highest scoring haplogroup to the deepest haplogroup for assignment
ref_files_dir       'ref_data'            Directory where SNAPPY’s reference files are saved
id2pos              'id_to_pos.txt'.      File listing SNP ids and corresponding positions
pos2allele          'pos_to_allele.txt'   File listing SNP positions and corresponding alleles
hg2snp              'y_hg_and_snps.sort'  File listing markers and haplogroups
tree_strct          'tree_structure.txt'  file listing haplogroup parent-child relationships for haplogroups that do not conform to naming conventions
ancestral_hg_depth  2                     number of ancestral haplogroups to check when considering whether a haplogroup receives a score
truncate_haps       N/A                   file with list of haplogroups past which SNAPPY will not make assignments
==================  ====================  ===========================================

All adjustable parameters can be accessed at runtime by calling SNAPPY followed by `--help`. To adjust a parameter, append a double hyphen (--) followed immediately by the parameter name, a space, and the desired value for that parameter. 

Example:
::

   python SNAPPY_v123.py --infile plink_prefix --min_hap_score 0.7

Notes and Considerations:
=========================

- All reference files included in the current distribution of SNAPPY use positions from human genome version GRCh37. Genotype positions from other versions of the human genome may result in inaccurate results.
- Prior to running SNAPPY, it may be necessary to check for strand concordance with the Y-chromosome of GRCh37, and to flip and/or remove ambiguous sites and those whose variants correspond to genotyping from the non-reference strand.
- A key aspect of the SNAPPY’s success is the robust nature of the Y-chromosome tree and the inclusion of informative variants on the Multi-Ethnic Genotyping Array (MEGA). SNAPPY’s current implementation was designed and tested using genotyping data from the MEGA, which includes over 11,000 variants on the Y-chromosome. SNAPPY should readily apply to other arrays, but care should be taken to ensure that arrays have a sufficient number of loci that are included in the reference library.
- Genotyping by sequencing (GBS) is increasingly popular, and data generated through GBS is compatible with SNAPPY, provided that all sites passing quality filters are included in the output genotypes during variant calling (this can be accomplished, for example, using the --emit-all argument in GATK’s variant calling pipeline). Otherwise, haplogroup-informative sites where the reference sequence used in variant calling has a derived allele may not be included in the genotype file. 

Citation:
=========

If you use SNAPPY, please cite our `preprint on bioRXiv<https://www.biorxiv.org/content/10.1101/454736v2>`_.

Terms of Use:
-------------

SNAPPY is published under a GPL-3.0 License. More information about the license is available `here <https://opensource.org/licenses/GPL-3.0>`_.
